# Generated from grammar/Evans.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2<")
        buf.write("\u01a2\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\3\2\3\2\3\3\3\3\3\4\3\4")
        buf.write("\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13")
        buf.write("\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22")
        buf.write("\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27")
        buf.write("\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34")
        buf.write("\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \7 \u00cf\n \f \16 \u00d2\13 \3 \3 \3 \3")
        buf.write(" \7 \u00d8\n \f \16 \u00db\13 \3 \5 \u00de\n \3!\3!\3")
        buf.write("!\3\"\6\"\u00e4\n\"\r\"\16\"\u00e5\3#\6#\u00e9\n#\r#\16")
        buf.write("#\u00ea\3#\3#\6#\u00ef\n#\r#\16#\u00f0\3#\5#\u00f4\n#")
        buf.write("\3#\3#\6#\u00f8\n#\r#\16#\u00f9\3#\5#\u00fd\n#\3#\6#\u0100")
        buf.write("\n#\r#\16#\u0101\3#\3#\5#\u0106\n#\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\5$\u0111\n$\3%\3%\5%\u0115\n%\3%\6%\u0118\n%\r")
        buf.write("%\16%\u0119\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3(\3")
        buf.write("(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3+\3+\3+\3")
        buf.write("+\3+\3,\3,\3,\3,\3,\3-\3-\3-\3.\3.\3.\3.\3.\3/\3/\3/\3")
        buf.write("/\3/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\38")
        buf.write("\38\38\38\38\39\39\39\39\39\3:\3:\3:\3:\3;\3;\3;\3;\7")
        buf.write(";\u018a\n;\f;\16;\u018d\13;\3<\3<\3=\3=\3>\3>\7>\u0195")
        buf.write("\n>\f>\16>\u0198\13>\3>\3>\3?\6?\u019d\n?\r?\16?\u019e")
        buf.write("\3?\3?\2\2@\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\2C\"")
        buf.write("E#G$I\2K%M&O\'Q(S)U*W+Y,[-]._/a\60c\61e\62g\63i\64k\65")
        buf.write("m\66o\67q8s9u:w\2y\2{;}<\3\2\13\4\2$$^^\4\2))^^\n\2$$")
        buf.write("))^^ddhhppttvv\4\2GGgg\4\2--//\4\2C\\c|\3\2\62;\4\2\f")
        buf.write("\f\16\17\5\2\13\f\17\17\"\"\2\u01b3\2\3\3\2\2\2\2\5\3")
        buf.write("\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2")
        buf.write("\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2")
        buf.write("\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2")
        buf.write("\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2")
        buf.write("\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3")
        buf.write("\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2")
        buf.write("\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3")
        buf.write("\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[")
        buf.write("\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2")
        buf.write("e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2")
        buf.write("\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2{\3\2\2")
        buf.write("\2\2}\3\2\2\2\3\177\3\2\2\2\5\u0081\3\2\2\2\7\u0083\3")
        buf.write("\2\2\2\t\u0085\3\2\2\2\13\u0087\3\2\2\2\r\u0089\3\2\2")
        buf.write("\2\17\u008b\3\2\2\2\21\u008d\3\2\2\2\23\u008f\3\2\2\2")
        buf.write("\25\u0091\3\2\2\2\27\u0094\3\2\2\2\31\u0097\3\2\2\2\33")
        buf.write("\u009a\3\2\2\2\35\u009d\3\2\2\2\37\u00a0\3\2\2\2!\u00a3")
        buf.write("\3\2\2\2#\u00a6\3\2\2\2%\u00aa\3\2\2\2\'\u00ac\3\2\2\2")
        buf.write(")\u00ae\3\2\2\2+\u00b0\3\2\2\2-\u00b2\3\2\2\2/\u00b4\3")
        buf.write("\2\2\2\61\u00b6\3\2\2\2\63\u00b8\3\2\2\2\65\u00bb\3\2")
        buf.write("\2\2\67\u00be\3\2\2\29\u00c1\3\2\2\2;\u00c4\3\2\2\2=\u00c8")
        buf.write("\3\2\2\2?\u00dd\3\2\2\2A\u00df\3\2\2\2C\u00e3\3\2\2\2")
        buf.write("E\u0105\3\2\2\2G\u0110\3\2\2\2I\u0112\3\2\2\2K\u011b\3")
        buf.write("\2\2\2M\u0121\3\2\2\2O\u0126\3\2\2\2Q\u012c\3\2\2\2S\u0131")
        buf.write("\3\2\2\2U\u0136\3\2\2\2W\u013b\3\2\2\2Y\u0140\3\2\2\2")
        buf.write("[\u0143\3\2\2\2]\u0148\3\2\2\2_\u014d\3\2\2\2a\u0151\3")
        buf.write("\2\2\2c\u0157\3\2\2\2e\u015b\3\2\2\2g\u0161\3\2\2\2i\u0166")
        buf.write("\3\2\2\2k\u016e\3\2\2\2m\u0172\3\2\2\2o\u0177\3\2\2\2")
        buf.write("q\u017c\3\2\2\2s\u0181\3\2\2\2u\u0185\3\2\2\2w\u018e\3")
        buf.write("\2\2\2y\u0190\3\2\2\2{\u0192\3\2\2\2}\u019c\3\2\2\2\177")
        buf.write("\u0080\7}\2\2\u0080\4\3\2\2\2\u0081\u0082\7\177\2\2\u0082")
        buf.write("\6\3\2\2\2\u0083\u0084\7<\2\2\u0084\b\3\2\2\2\u0085\u0086")
        buf.write("\7.\2\2\u0086\n\3\2\2\2\u0087\u0088\7=\2\2\u0088\f\3\2")
        buf.write("\2\2\u0089\u008a\7?\2\2\u008a\16\3\2\2\2\u008b\u008c\7")
        buf.write("*\2\2\u008c\20\3\2\2\2\u008d\u008e\7+\2\2\u008e\22\3\2")
        buf.write("\2\2\u008f\u0090\7\60\2\2\u0090\24\3\2\2\2\u0091\u0092")
        buf.write("\7-\2\2\u0092\u0093\7?\2\2\u0093\26\3\2\2\2\u0094\u0095")
        buf.write("\7/\2\2\u0095\u0096\7?\2\2\u0096\30\3\2\2\2\u0097\u0098")
        buf.write("\7,\2\2\u0098\u0099\7?\2\2\u0099\32\3\2\2\2\u009a\u009b")
        buf.write("\7\61\2\2\u009b\u009c\7?\2\2\u009c\34\3\2\2\2\u009d\u009e")
        buf.write("\7\'\2\2\u009e\u009f\7?\2\2\u009f\36\3\2\2\2\u00a0\u00a1")
        buf.write("\7-\2\2\u00a1\u00a2\7-\2\2\u00a2 \3\2\2\2\u00a3\u00a4")
        buf.write("\7/\2\2\u00a4\u00a5\7/\2\2\u00a5\"\3\2\2\2\u00a6\u00a7")
        buf.write("\7p\2\2\u00a7\u00a8\7q\2\2\u00a8\u00a9\7v\2\2\u00a9$\3")
        buf.write("\2\2\2\u00aa\u00ab\7-\2\2\u00ab&\3\2\2\2\u00ac\u00ad\7")
        buf.write("/\2\2\u00ad(\3\2\2\2\u00ae\u00af\7,\2\2\u00af*\3\2\2\2")
        buf.write("\u00b0\u00b1\7\61\2\2\u00b1,\3\2\2\2\u00b2\u00b3\7\'\2")
        buf.write("\2\u00b3.\3\2\2\2\u00b4\u00b5\7>\2\2\u00b5\60\3\2\2\2")
        buf.write("\u00b6\u00b7\7@\2\2\u00b7\62\3\2\2\2\u00b8\u00b9\7>\2")
        buf.write("\2\u00b9\u00ba\7?\2\2\u00ba\64\3\2\2\2\u00bb\u00bc\7@")
        buf.write("\2\2\u00bc\u00bd\7?\2\2\u00bd\66\3\2\2\2\u00be\u00bf\7")
        buf.write("#\2\2\u00bf\u00c0\7?\2\2\u00c08\3\2\2\2\u00c1\u00c2\7")
        buf.write("?\2\2\u00c2\u00c3\7?\2\2\u00c3:\3\2\2\2\u00c4\u00c5\7")
        buf.write("c\2\2\u00c5\u00c6\7p\2\2\u00c6\u00c7\7f\2\2\u00c7<\3\2")
        buf.write("\2\2\u00c8\u00c9\7q\2\2\u00c9\u00ca\7t\2\2\u00ca>\3\2")
        buf.write("\2\2\u00cb\u00d0\7$\2\2\u00cc\u00cf\5A!\2\u00cd\u00cf")
        buf.write("\n\2\2\2\u00ce\u00cc\3\2\2\2\u00ce\u00cd\3\2\2\2\u00cf")
        buf.write("\u00d2\3\2\2\2\u00d0\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2")
        buf.write("\u00d1\u00d3\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d3\u00de\7")
        buf.write("$\2\2\u00d4\u00d9\7)\2\2\u00d5\u00d8\5A!\2\u00d6\u00d8")
        buf.write("\n\3\2\2\u00d7\u00d5\3\2\2\2\u00d7\u00d6\3\2\2\2\u00d8")
        buf.write("\u00db\3\2\2\2\u00d9\u00d7\3\2\2\2\u00d9\u00da\3\2\2\2")
        buf.write("\u00da\u00dc\3\2\2\2\u00db\u00d9\3\2\2\2\u00dc\u00de\7")
        buf.write(")\2\2\u00dd\u00cb\3\2\2\2\u00dd\u00d4\3\2\2\2\u00de@\3")
        buf.write("\2\2\2\u00df\u00e0\7^\2\2\u00e0\u00e1\t\4\2\2\u00e1B\3")
        buf.write("\2\2\2\u00e2\u00e4\5y=\2\u00e3\u00e2\3\2\2\2\u00e4\u00e5")
        buf.write("\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6")
        buf.write("D\3\2\2\2\u00e7\u00e9\5y=\2\u00e8\u00e7\3\2\2\2\u00e9")
        buf.write("\u00ea\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2")
        buf.write("\u00eb\u00ec\3\2\2\2\u00ec\u00ee\7\60\2\2\u00ed\u00ef")
        buf.write("\5y=\2\u00ee\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00ee")
        buf.write("\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f3\3\2\2\2\u00f2")
        buf.write("\u00f4\5I%\2\u00f3\u00f2\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4")
        buf.write("\u0106\3\2\2\2\u00f5\u00f7\7\60\2\2\u00f6\u00f8\5y=\2")
        buf.write("\u00f7\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00f7\3")
        buf.write("\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fc\3\2\2\2\u00fb\u00fd")
        buf.write("\5I%\2\u00fc\u00fb\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u0106")
        buf.write("\3\2\2\2\u00fe\u0100\5y=\2\u00ff\u00fe\3\2\2\2\u0100\u0101")
        buf.write("\3\2\2\2\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102")
        buf.write("\u0103\3\2\2\2\u0103\u0104\5I%\2\u0104\u0106\3\2\2\2\u0105")
        buf.write("\u00e8\3\2\2\2\u0105\u00f5\3\2\2\2\u0105\u00ff\3\2\2\2")
        buf.write("\u0106F\3\2\2\2\u0107\u0108\7v\2\2\u0108\u0109\7t\2\2")
        buf.write("\u0109\u010a\7w\2\2\u010a\u0111\7g\2\2\u010b\u010c\7h")
        buf.write("\2\2\u010c\u010d\7c\2\2\u010d\u010e\7n\2\2\u010e\u010f")
        buf.write("\7u\2\2\u010f\u0111\7g\2\2\u0110\u0107\3\2\2\2\u0110\u010b")
        buf.write("\3\2\2\2\u0111H\3\2\2\2\u0112\u0114\t\5\2\2\u0113\u0115")
        buf.write("\t\6\2\2\u0114\u0113\3\2\2\2\u0114\u0115\3\2\2\2\u0115")
        buf.write("\u0117\3\2\2\2\u0116\u0118\5y=\2\u0117\u0116\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2")
        buf.write("\u011aJ\3\2\2\2\u011b\u011c\7e\2\2\u011c\u011d\7n\2\2")
        buf.write("\u011d\u011e\7c\2\2\u011e\u011f\7u\2\2\u011f\u0120\7u")
        buf.write("\2\2\u0120L\3\2\2\2\u0121\u0122\7c\2\2\u0122\u0123\7v")
        buf.write("\2\2\u0123\u0124\7v\2\2\u0124\u0125\7t\2\2\u0125N\3\2")
        buf.write("\2\2\u0126\u0127\7u\2\2\u0127\u0128\7v\2\2\u0128\u0129")
        buf.write("\7c\2\2\u0129\u012a\7v\2\2\u012a\u012b\7g\2\2\u012bP\3")
        buf.write("\2\2\2\u012c\u012d\7k\2\2\u012d\u012e\7p\2\2\u012e\u012f")
        buf.write("\7k\2\2\u012f\u0130\7v\2\2\u0130R\3\2\2\2\u0131\u0132")
        buf.write("\7h\2\2\u0132\u0133\7w\2\2\u0133\u0134\7p\2\2\u0134\u0135")
        buf.write("\7e\2\2\u0135T\3\2\2\2\u0136\u0137\7r\2\2\u0137\u0138")
        buf.write("\7t\2\2\u0138\u0139\7g\2\2\u0139\u013a\7f\2\2\u013aV\3")
        buf.write("\2\2\2\u013b\u013c\7q\2\2\u013c\u013d\7r\2\2\u013d\u013e")
        buf.write("\7g\2\2\u013e\u013f\7t\2\2\u013fX\3\2\2\2\u0140\u0141")
        buf.write("\7k\2\2\u0141\u0142\7h\2\2\u0142Z\3\2\2\2\u0143\u0144")
        buf.write("\7g\2\2\u0144\u0145\7n\2\2\u0145\u0146\7u\2\2\u0146\u0147")
        buf.write("\7g\2\2\u0147\\\3\2\2\2\u0148\u0149\7g\2\2\u0149\u014a")
        buf.write("\7n\2\2\u014a\u014b\7k\2\2\u014b\u014c\7h\2\2\u014c^\3")
        buf.write("\2\2\2\u014d\u014e\7h\2\2\u014e\u014f\7q\2\2\u014f\u0150")
        buf.write("\7t\2\2\u0150`\3\2\2\2\u0151\u0152\7y\2\2\u0152\u0153")
        buf.write("\7j\2\2\u0153\u0154\7k\2\2\u0154\u0155\7n\2\2\u0155\u0156")
        buf.write("\7g\2\2\u0156b\3\2\2\2\u0157\u0158\7t\2\2\u0158\u0159")
        buf.write("\7g\2\2\u0159\u015a\7v\2\2\u015ad\3\2\2\2\u015b\u015c")
        buf.write("\7d\2\2\u015c\u015d\7t\2\2\u015d\u015e\7g\2\2\u015e\u015f")
        buf.write("\7c\2\2\u015f\u0160\7m\2\2\u0160f\3\2\2\2\u0161\u0162")
        buf.write("\7e\2\2\u0162\u0163\7q\2\2\u0163\u0164\7p\2\2\u0164\u0165")
        buf.write("\7v\2\2\u0165h\3\2\2\2\u0166\u0167\7r\2\2\u0167\u0168")
        buf.write("\7t\2\2\u0168\u0169\7g\2\2\u0169\u016a\7e\2\2\u016a\u016b")
        buf.write("\7q\2\2\u016b\u016c\7p\2\2\u016c\u016d\7f\2\2\u016dj\3")
        buf.write("\2\2\2\u016e\u016f\7g\2\2\u016f\u0170\7h\2\2\u0170\u0171")
        buf.write("\7h\2\2\u0171l\3\2\2\2\u0172\u0173\7g\2\2\u0173\u0174")
        buf.write("\7z\2\2\u0174\u0175\7g\2\2\u0175\u0176\7e\2\2\u0176n\3")
        buf.write("\2\2\2\u0177\u0178\7n\2\2\u0178\u0179\7k\2\2\u0179\u017a")
        buf.write("\7u\2\2\u017a\u017b\7v\2\2\u017bp\3\2\2\2\u017c\u017d")
        buf.write("\7d\2\2\u017d\u017e\7q\2\2\u017e\u017f\7q\2\2\u017f\u0180")
        buf.write("\7n\2\2\u0180r\3\2\2\2\u0181\u0182\7u\2\2\u0182\u0183")
        buf.write("\7v\2\2\u0183\u0184\7t\2\2\u0184t\3\2\2\2\u0185\u018b")
        buf.write("\5w<\2\u0186\u018a\5w<\2\u0187\u018a\7a\2\2\u0188\u018a")
        buf.write("\5y=\2\u0189\u0186\3\2\2\2\u0189\u0187\3\2\2\2\u0189\u0188")
        buf.write("\3\2\2\2\u018a\u018d\3\2\2\2\u018b\u0189\3\2\2\2\u018b")
        buf.write("\u018c\3\2\2\2\u018cv\3\2\2\2\u018d\u018b\3\2\2\2\u018e")
        buf.write("\u018f\t\7\2\2\u018fx\3\2\2\2\u0190\u0191\t\b\2\2\u0191")
        buf.write("z\3\2\2\2\u0192\u0196\7%\2\2\u0193\u0195\n\t\2\2\u0194")
        buf.write("\u0193\3\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194\3\2\2\2")
        buf.write("\u0196\u0197\3\2\2\2\u0197\u0199\3\2\2\2\u0198\u0196\3")
        buf.write("\2\2\2\u0199\u019a\b>\2\2\u019a|\3\2\2\2\u019b\u019d\t")
        buf.write("\n\2\2\u019c\u019b\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u019c")
        buf.write("\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0")
        buf.write("\u01a1\b?\2\2\u01a1~\3\2\2\2\27\2\u00ce\u00d0\u00d7\u00d9")
        buf.write("\u00dd\u00e5\u00ea\u00f0\u00f3\u00f9\u00fc\u0101\u0105")
        buf.write("\u0110\u0114\u0119\u0189\u018b\u0196\u019e\3\b\2\2")
        return buf.getvalue()


class EvansLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    STRING_LITERAL = 31
    DECIMAL_LITERAL = 32
    FLOAT_LITERAL = 33
    BOOL_LITERAL = 34
    CLASS = 35
    ATTR = 36
    STATE = 37
    INIT = 38
    FUNC = 39
    PRED = 40
    OPER = 41
    IF = 42
    ELSE = 43
    ELIF = 44
    FOR = 45
    WHILE = 46
    RET = 47
    BREAK = 48
    CONT = 49
    PRECOND = 50
    EFF = 51
    EXEC = 52
    LIST = 53
    BOOL = 54
    STR = 55
    ID = 56
    COMMENT = 57
    WS = 58

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "':'", "','", "';'", "'='", "'('", "')'", "'.'", 
            "'+='", "'-='", "'*='", "'/='", "'%='", "'++'", "'--'", "'not'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'>'", "'<='", "'>='", 
            "'!='", "'=='", "'and'", "'or'", "'class'", "'attr'", "'state'", 
            "'init'", "'func'", "'pred'", "'oper'", "'if'", "'else'", "'elif'", 
            "'for'", "'while'", "'ret'", "'break'", "'cont'", "'precond'", 
            "'eff'", "'exec'", "'list'", "'bool'", "'str'" ]

    symbolicNames = [ "<INVALID>",
            "STRING_LITERAL", "DECIMAL_LITERAL", "FLOAT_LITERAL", "BOOL_LITERAL", 
            "CLASS", "ATTR", "STATE", "INIT", "FUNC", "PRED", "OPER", "IF", 
            "ELSE", "ELIF", "FOR", "WHILE", "RET", "BREAK", "CONT", "PRECOND", 
            "EFF", "EXEC", "LIST", "BOOL", "STR", "ID", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "STRING_LITERAL", 
                  "STRING_ESCAPE", "DECIMAL_LITERAL", "FLOAT_LITERAL", "BOOL_LITERAL", 
                  "EXPONENT", "CLASS", "ATTR", "STATE", "INIT", "FUNC", 
                  "PRED", "OPER", "IF", "ELSE", "ELIF", "FOR", "WHILE", 
                  "RET", "BREAK", "CONT", "PRECOND", "EFF", "EXEC", "LIST", 
                  "BOOL", "STR", "ID", "LETTER", "DIGIT", "COMMENT", "WS" ]

    grammarFileName = "Evans.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


