---
# Simple calculator in Evans YAML
# Developed by Igor Tikhonin in 2018
#
# Model description:
# 1) when a digit or digital point button is pressed
#    its value is pushed to stack and displayed;
# 2) when an operation button (+,-,/,*) is pressed, then:
#    if the early entered operation value is empty
#    store the operation to the early entered operation variable;
#    else, perform operation as if '=' sign was pressed and then store the operation
#    to the early entered operation variable;
# 3) when the '=' sign is pressed,
#    execute the early entered operation with stack and register,
#    store the result to register and copy it to stack; clear
#    early entered operation

classes:
  Stack:
    attr:
      s: List
    methods:  # the actual methods should be written in some language (e.g. Python) for now;
              # after plan is created, the interpreter will generate code and then execute it;
              # later, when the Evans syntax is designed, the intermediate code generation phase won't be necessary;
      pushKey:
        parameters:
          k: Key # can be data or hybrid types
        body: |
          s.append(k.getValue())

      pushReg:
        parameters:
          a: Alu
        body: |
          s.append(str(a.getReg()).split())

      getValue:
        body: |
          return ''.join(s)

      clean:
        body: |
          s.clear()
    state:
      last_key: ['digit', 'point']  # state variable with explisitly listed values (inline enum);
                                    # 'undef' is the default value for enums
                                    # TODO: think how to declare other classes variables
      dec_point: Boolean # False is the default value for Boolean type
      changed: Boolean
      tobe_cleaned: Boolean
            # types of state variables so far:
            #   - inline enum
            #   - Boolean
            #   - Num (to be done)
    predicates: # predicates in Evans are equivalent to PDDL's derived predicates, i.e. read only, can't be used for assignments;
                # TODO: predicates in PDDL can have multiple arguments;
                #       in Evans this can be implemented the same way as parameters in operators
      isLastKeyDigit: last_key == 'digit' # expressions can contain comparisons '>', '<', '>=', '<=', '==', '!=',
                                          # and logical operators: not, and, or, with standard priorities, i.e not, and, or;
                                          # only simple comparisons are supported for now, e.g. var == 'key'
                                          # comparisons can't be combined with logical operators
      isLastKeyPoint: last_key == 'point'
      isDecPoint: dec_point # synonym to dec_point == True
    operators: # actions in PDDL terms
      push:
        parameters: # global variables are not supported, i.e. the variable scope is limitied
                    # by parameters and variables defined in classes;
                    # TODO: it is not clear how to implement PDDL operators 'forall' and 'exists';
                    #       think about using lists in state operators
                    # TODO: think about PDDL's 'imply'
          k: Key
        when: # condition check; state variables can be used here as well as predicates
              # lists interpreted as conjuctions (and)
          - not changed
          - not k.processed
          - k.isDigit or (k.k_val == 'point' and not dec_point)  # k.isDigit is a shortcut for k.isDigit()
                                # state variables can be tested directly, e.g. k.k_val == 'point', which is equal to k.isPoint
                                # TODO: implement full (not shortcut) predicate call with zero parameters k.isDigit()
                                #       and with multiple parameters var.predicate(param1=val1, param2=val2)
          - not tobe_cleaned
        effect: # only simple assignments are supported; one assignment per list item
          - changed: True
          - k.processed: True
          - if: k.isPoint # one condition per list item
            then:
              - last_key: 'point'
              - dec_point: True
            else:
              - last_key: 'digit'
        exec: # TODO: effect might be conditional; think about conditional execution;
              # exec section should have read access to state variables and full access to attributes
          - pushKey: k  # data methods are called from here;
                      # assignments, conditionals, loops, etc. are not supported for now;
                      # TODO: should we be able to call other classes methods here?

      clean:
        parameters:
          k: Key
        when:
          - not k.processed
          - k.isDigit or k.isPoint
          - tobe_cleaned
        effect:
          - tobe_cleaned: False
          - dec_point: False
          - last_key: 'digit'
        exec:
          - clean:  # methods can be called with no parameters

      copy_from_register:
        parameters:
          k: Key
          a: Alu
        when:
          - a.isOpExecuted
          - k.isOp or k.isEq
          - not k.processed
        effect:
          - k.processed: True
          - changed: True
          - a.reg_stored: False
          - tobe_cleaned: True
        exec:
          - clean:
          - pushReg: a

  Alu:
    attr:
      reg: Num
      op: Char
    methods:
      storeReg:
        parameters:
          s: Stack
        body: |
          reg = float(s.getValue())
      storeOp:
        parameters:
          k: Key
        body: |
          op = k.getValue()
      execOp:
        parameters:
          s: Stack
        body: |
          st1 = float(s.getValue())
          if op == '+':
            reg = st1 + reg
          elif op == '-':
            reg = st1 + reg
          elif op == '*':
            reg = st1 * reg
          elif op == '/':
            reg = st1 / reg
    state:
      reg_stored: Boolean
      op_executed: Boolean
      op_stored: Boolean
    predicates:
      isOpExecuted: op_executed == True
      isOpStored: op_stored == True
      isRegStored: reg_stored == True
    operators:
      stack_to_register:
        parameters:
          k: Key
          s: Stack
        when:
          - not k.processed
          - k.isOp
          - not reg_stored
          - isOpStored
        effect:
          - reg_stored: True
          - k.processed: True
          - s.tobe_cleaned: True
        exec:
          - storeReg: s

      store_op:
        parameters:
          k: Key
        when:
          - not isOpStored
          - k.isOp
          - not reg_stored
          - not k.processed
        effect:
          - op_stored: True
        exec:
          - storeOp: k

      exec_op:
        parameters:
          k: Key
          s: Stack
        when:
          - isOpStored
          - k.isOp or k.isEq
          - isRegStored
          - not k.processed
          - not isOpExecuted
        effect:
          - op_executed: True
          - if: k.isEq
            then:
              - op_stored: False
        exec:
          - execOp: s

  Key:
    attr:
      k: Char
    methods:
      getValue:
        body: |
          return k
    state:
      k_val: ['digit', 'point', 'op', 'eq', 'clear', 'erase']
      processed: Boolean
    predicates:
      isOp: k_val == 'op'
      isDigit: k_val == 'digit'
      isPoint: k_val == 'point'
      isEq: k_val == 'eq'
      isClear: k_val == 'clear'
      isErase: k_val == 'erase'
    operators:
      no_op:
        parameters:
          s: Stack
        when:
          - not processed
          - isPoint
          - s.isDecPoint
        effect:
          - processed: True

  Display:
    state:
      updated: Boolean
    operators:
      display_stack:
        parameters:
          s: Stack
          k: Key
        when:
          - not updated
          - k.processed
          - s.changed
        effect:
          - updated: True
          - s.changed: False

main:
  # main section:
  #   - main can read the list of arguments;
  #   - there should be methods to read/write from/to files (sockets, streams);
  #   - there should be some way to loop over actions;
  #   - main can trigger planning
  #   - there should be a way to dump the planning state (into json format)
  #   - variables can be defined in 'parameters' and exec 'vars'
  # exec section:
  #   - exec has 'vars' section, where variables are declared
  #   - 'tasks' section:
  #       - code: here we initialize state variables and attributes;
  #       - plan: here we run planning
  #       TODO: think about recovery from unsuccessfull planning
  parameters:
    input_file: Str
              # parameters of main are the program attributes,
              # the format is: -input_file='file name';
  exec:
    # either vars and tasks are defined, or just an array of calls of methods
    vars:
      stack1: Stack
      key1: Key
      display1: Display
      alu1: Alu
      key_val1: Char
      key_type: Str
    tasks: # one task per list element
      - loop:  # unconditional (endless) loop; TODO implement loops with conditional exit
        # code section has write access to attributes and state variables of the objects defined in vars;
        # main parameters are read-only
        - code: |
            # TODO: read STDIN and assign to key_val1
            key1['attr']['k'] = key_val1  # attribute assignment
            if key_val1 in ['0','1','2', '3', '4', '5', '6', '7', '8', '9']:
              key1['state']['k_val'] = 'digit'  # state variable assignment
            elif key1_value == '.':
              key1['state']['k_val'] = 'point'
            elif key1_value in ['+', '-', '/', '*']:
              key1['state']['k_val'] = 'op'
            elif key1_value == '=':
              key1['state']['k_val'] = 'eq'
            elif key1_value == 'C':
                key1['state']['k_val'] = 'clear'
            elif key1_value == 'R':
              key1['state']['k_val'] = 'erase'
        - auto:
            name: 'Simple calculator'
            objects:  # here we just list the objects, participating in automatic planning;
                      # the objects were defined in the var section and
                      # (partially) initialized in the code section
              - stack1
              - key1
              - display1
              - alu1
            init:
              # one assignment per list item
              - key1.processed: False
              - display1.updated: False
            goal:
              - key1.processed: True
              - if: stack1.changed
                then:
                  - display1.updated: True
        - break:
